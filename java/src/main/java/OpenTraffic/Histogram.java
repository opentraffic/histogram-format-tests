// automatically generated by the FlatBuffers compiler, do not modify

package OpenTraffic;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class Histogram extends Table {
  public static Histogram getRootAsHistogram(ByteBuffer _bb) { return getRootAsHistogram(_bb, new Histogram()); }
  public static Histogram getRootAsHistogram(ByteBuffer _bb, Histogram obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; }
  public Histogram __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public byte vehicleType() { int o = __offset(4); return o != 0 ? bb.get(o + bb_pos) : 0; }
  public Segment segments(int j) { return segments(new Segment(), j); }
  public Segment segments(Segment obj, int j) { int o = __offset(6); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int segmentsLength() { int o = __offset(6); return o != 0 ? __vector_len(o) : 0; }

  public static int createHistogram(FlatBufferBuilder builder,
      byte vehicle_type,
      int segmentsOffset) {
    builder.startObject(2);
    Histogram.addSegments(builder, segmentsOffset);
    Histogram.addVehicleType(builder, vehicle_type);
    return Histogram.endHistogram(builder);
  }

  public static void startHistogram(FlatBufferBuilder builder) { builder.startObject(2); }
  public static void addVehicleType(FlatBufferBuilder builder, byte vehicleType) { builder.addByte(0, vehicleType, 0); }
  public static void addSegments(FlatBufferBuilder builder, int segmentsOffset) { builder.addOffset(1, segmentsOffset, 0); }
  public static int createSegmentsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startSegmentsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endHistogram(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
  public static void finishHistogramBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset); }
}

